# slide 11
counter <- 1
U <- vector()
A <- vector()

for (i in c(1:2000)) {
  U[i] <- runif(1)
  D <- runif(1)
  if (D < U[i]) {
    A[counter] <- U[i]
    counter <- counter + 1
  }
}
accepted <- counter - 1

# Histogram of all proposals
png("Chapter1-Rejection-Sampling-HistogramU.png", width = 4096, height = 2160, res = 300)  # high resolution
hist(U,breaks = 20, main = "Histogram of U",
     xlab = "U", ylab = "Frequency", col = "lightgray", border = "white")
dev.off()  # close the device

# Histogram of accepted values
png("Chapter1-Rejection-Sampling-HistogramX.png", width = 4096, height = 2160, res = 300)  # high resolution
hist(A, breaks = 20, main = "Histogram of X",
     xlab = "X", ylab = "Frequency", col = "lightblue", border = "white")
dev.off()  # close the device

# slide 16
X <- seq(-6, 6, 0.1)
eq = pi*(1+X^2) / (1+X^4)
plot(X, eq, type='l')

# slide 17
n <- 100
counter <- 1
c <- 3.8
target_samples <- vector()

while (counter < n+1) {
  U <- runif(2)
  proposal <- tan(pi*U[1])
  f <- 1 / (1 + proposal^4)
  g <- 1 / (pi * (1 + proposal^2))
  
  if (U[2] < f/(c*g)) {
    target_samples[counter] <- proposal
    counter <- counter+1
  }
}

hist(target_samples, breaks = 15, main = "Histogram of Samples from f(x) ~ 1/(1+x^4)",
     xlab = "x",ylab = "Frequency", col = "lightblue", border = "white")
